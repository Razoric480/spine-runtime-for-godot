name: üêß Linux Builds
on:
  push:
    branches: [ spine4.0 ]
  # pull_request:
  #   branches: [ spine4.0 ]

# Global Settings
env:
  GODOT_BASE_BRANCH: 3.4-stable
  SCONS_CACHE_LIMIT: 4096
  GODOT_TARGET_PLATFORM: x11 # Platform "linuxbsd" is still called "x11" in Godot 3.x.
  SPINE_SUFFIX: 4_0

jobs:
  linux-editor:
    runs-on: "ubuntu-20.04"
    name: Editor

    steps:
      # Clone Godot
      - uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: ${{env.GODOT_BASE_BRANCH}}
      
      # Clone our module under the correct directory
      - uses: actions/checkout@v2
        with:
          path: modules/spine_runtime
      
      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
      
      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev xvfb \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm
      
      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: linux-editor-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}
      
      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version
      
      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 verbose=yes warnings=all werror=no platform=${{env.GODOT_TARGET_PLATFORM}} tools=yes tests=no target=release_debug production=yes bits=64

      # Make build available
      - uses: actions/upload-artifact@v2
        with:
          name: godot_editor_with_spine_${{env.SPINE_SUFFIX}}.64
          path: bin/godot.${{env.GODOT_TARGET_PLATFORM}}.opt.tools.64

  linux-template-debug:
    runs-on: "ubuntu-20.04"
    name: Debug

    steps:
      # Clone Godot
      - uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: ${{env.GODOT_BASE_BRANCH}}

      # Clone our module under the correct directory
      - uses: actions/checkout@v2
        with:
          path: modules/spine_runtime

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
      
      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev xvfb \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: linux-template-debug-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
      
      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 verbose=yes warnings=all werror=no platform=${{env.GODOT_TARGET_PLATFORM}} tools=no tests=no target=debug bits=64
      
      # Make build available
      - uses: actions/upload-artifact@v2
        with:
          name: godot.${{env.GODOT_TARGET_PLATFORM}}.debug.64
          path: bin/godot.${{env.GODOT_TARGET_PLATFORM}}.debug.64

  linux-template-release:
    runs-on: "ubuntu-20.04"
    name: Release

    steps:
      # Clone Godot
      - uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: ${{env.GODOT_BASE_BRANCH}}

      # Clone our module under the correct directory
      - uses: actions/checkout@v2
        with:
          path: modules/spine_runtime

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
      
      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev xvfb \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: linux-template-release-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
      
      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 verbose=yes warnings=all werror=no platform=${{env.GODOT_TARGET_PLATFORM}} tools=no tests=no target=release bits=64
      
      # Make build available
      - uses: actions/upload-artifact@v2
        with:
          name: godot.${{env.GODOT_TARGET_PLATFORM}}.opt.64
          path: bin/godot.${{env.GODOT_TARGET_PLATFORM}}.opt.64

  linux-editor-32:
    runs-on: "ubuntu-20.04"
    name: Editor-32

    steps:
      # Clone Godot
      - uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: ${{env.GODOT_BASE_BRANCH}}
      
      # Clone our module under the correct directory
      - uses: actions/checkout@v2
        with:
          path: modules/spine_runtime
      
      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
      
      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install build-essential pkg-config \
            xvfb \
            gcc-multilib g++-multilib \
            libc6-dev libc6-dev-i386 \
            libx11-dev libx11-dev:i386 \
            libxcursor-dev libxcursor-dev:i386 \
            libxinerama-dev libxinerama-dev:i386 \
            libgl1-mesa-dev libgl1-mesa-dev:i386 \
            libglu-dev libglu-dev:i386 \
            libasound2-dev libasound2-dev:i386 \
            libpulse-dev libpulse-dev:i386 \
            libudev-dev libudev-dev:i386 \
            libxi-dev libxi-dev:i386 \
            libxrandr-dev libxrandr-dev:i386 \
            yasm
      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: linux-editor-32-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
      
      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version
      
      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 verbose=yes warnings=all werror=no platform=${{env.GODOT_TARGET_PLATFORM}} tools=yes tests=no target=release_debug production=yes bits=32

      # Make build available
      - uses: actions/upload-artifact@v2
        with:
          name: godot_editor_with_spine_${{env.SPINE_SUFFIX}}.32
          path: bin/godot.${{env.GODOT_TARGET_PLATFORM}}.opt.tools.32

  linux-template-debug-32:
    runs-on: "ubuntu-20.04"
    name: Debug-32

    steps:
      # Clone Godot
      - uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: ${{env.GODOT_BASE_BRANCH}}

      # Clone our module under the correct directory
      - uses: actions/checkout@v2
        with:
          path: modules/spine_runtime

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
      
      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install build-essential pkg-config \
            xvfb \
            gcc-multilib g++-multilib \
            libc6-dev libc6-dev-i386 \
            libx11-dev libx11-dev:i386 \
            libxcursor-dev libxcursor-dev:i386 \
            libxinerama-dev libxinerama-dev:i386 \
            libgl1-mesa-dev libgl1-mesa-dev:i386 \
            libglu-dev libglu-dev:i386 \
            libasound2-dev libasound2-dev:i386 \
            libpulse-dev libpulse-dev:i386 \
            libudev-dev libudev-dev:i386 \
            libxi-dev libxi-dev:i386 \
            libxrandr-dev libxrandr-dev:i386 \
            yasm

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: linux-template-debug-32-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
      
      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 verbose=yes warnings=all werror=no platform=${{env.GODOT_TARGET_PLATFORM}} tools=no tests=no target=debug bits=32
      
      # Make build available
      - uses: actions/upload-artifact@v2
        with:
          name: godot.${{env.GODOT_TARGET_PLATFORM}}.debug.32
          path: bin/godot.${{env.GODOT_TARGET_PLATFORM}}.debug.32

  linux-template-release-32:
    runs-on: "ubuntu-20.04"
    name: Release-32

    steps:
      # Clone Godot
      - uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: ${{env.GODOT_BASE_BRANCH}}

      # Clone our module under the correct directory
      - uses: actions/checkout@v2
        with:
          path: modules/spine_runtime

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
      
      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install build-essential pkg-config \
            xvfb \
            gcc-multilib g++-multilib \
            libc6-dev libc6-dev-i386 \
            libx11-dev libx11-dev:i386 \
            libxcursor-dev libxcursor-dev:i386 \
            libxinerama-dev libxinerama-dev:i386 \
            libgl1-mesa-dev libgl1-mesa-dev:i386 \
            libglu-dev libglu-dev:i386 \
            libasound2-dev libasound2-dev:i386 \
            libpulse-dev libpulse-dev:i386 \
            libudev-dev libudev-dev:i386 \
            libxi-dev libxi-dev:i386 \
            libxrandr-dev libxrandr-dev:i386 \
            yasm

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: linux-template-release-32-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
      
      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 verbose=yes warnings=all werror=no platform=${{env.GODOT_TARGET_PLATFORM}} tools=no tests=no target=release bits=32
      
      # Make build available
      - uses: actions/upload-artifact@v2
        with:
          name: godot.${{env.GODOT_TARGET_PLATFORM}}.opt.32
          path: bin/godot.${{env.GODOT_TARGET_PLATFORM}}.opt.32